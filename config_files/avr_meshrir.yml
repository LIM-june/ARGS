# Using tiny cuda nn implementatino, heshgrid to do rendering

### Path settings
path:
  expname: AVR
  dataset: MeshRIR
  logdir: logs/


### rendering settings
render:
  xyz_min: -6
  xyz_max:  6
  near: 0
  far: 4
  n_samples: 16
  n_azi: 80
  n_ele: 40
  speed: 343.8
  fs: 24000
  pathloss: 1.5


### training settings
train:
  lr: 5e-4
  weight_decay: 0
  T_max: 500000
  eta_min: 5e-5
  total_iterations: 500000
  load_ckpt: False
  save_freq: 10000
  val_freq: 10000
  n_imgs: 5
  batch_size: 6

  spec_loss_weight: 2
  amplitude_loss_weight: 4
  angle_loss_weight: 1
  time_loss_weight: 50
  energy_loss_weight: 1
  multistft_loss_weight: 1



### model settings  
model: 
  signal_output_dim: 2400
  leaky_relu: 0.03

  pos_encoding_sigma:
    base_resolution: 16
    log2_hashmap_size: 18
    n_features_per_level: 2
    n_levels: 20
    otype: HashGrid

  dir_encoding_sig:
    base_resolution: 16
    log2_hashmap_size: 20
    n_features_per_level: 2
    n_levels: 20
    otype: HashGrid
  
  tx_encoding_sig:
    base_resolution: 16
    log2_hashmap_size: 18
    n_features_per_level: 2
    n_levels: 20
    otype: HashGrid

  sigma_encoder_network:
    activation: ReLU
    n_hidden_layers: 3
    n_neurons: 128
    otype: FullyFusedMLP
    output_activation: None

  sigma_decoder_network:
    activation: ReLU
    n_hidden_layers: 3
    n_neurons: 128
    otype: FullyFusedMLP
    output_activation: None

  signal_network:
    activation: ReLU
    n_hidden_layers: 3
    n_neurons: 512
    otype: CutlassMLP
    output_activation: None
